% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/05_S4.R
\name{VariableMetadata}
\alias{VariableMetadata}
\title{Variable Metadata}
\usage{
VariableMetadata(var_dt, var_set_dt)
}
\arguments{
\item{var_dt}{\verb{[data.table]}

Contains information for individual variables. Must contain at a minimum
column \code{var_nm}.}

\item{var_set_dt}{\verb{[data.table]}

Contains information for sets of variables --- e.g. a common value space.
Must contain at a minimum columns
\itemize{
\item \code{id} \code{\link{character}}: Identifies each set of variable names. E.g.
\code{"my_set"}.
\item \code{var_nm_set} \verb{[list]}: Each list element contains a character string
vector of variable names. e.g. \code{list(c("a", "b"))}.
}}
}
\description{
Create a VariableMetadata object.
}
\section{Functions}{

\itemize{
\item \code{vame::VariableMetadata}: Use this function to create a new
VariableMetadata object.
}
}

\examples{

# vame::VariableMetadata ----------------------------------------------------

# basic example of different kinds of variables
value_space_d <- function() 1:3 * 100L
vd <- vame::VariableMetadata(
  var_dt = data.table::data.table(
    var_nm = c("a", "b", "c", "d", "e", "f"),
    type = c("categorical", "categorical",
             "categorical",
             "my_type_1", "my_type_2", "my_type_3")
  ),
  var_set_dt = data.table::data.table(
    id = c("ab", "c", "d", "e", "f"),
    var_nm_set = list(ab = c("a", "b"), c = "c", d = "d", e = "e", f = "f"),
    value_space = list(
      ab = list(dt = data.table::data.table(
        a = c(1L, 2L, 2L),
        b = c(11L, 21L, 22L)
      )),
      c = list(set = c("a", "b")),
      d = list(expr = quote(value_space_d())),
      e = list(bounds = list(
        lo = 0.0, hi = 10.0,
        lo_inclusive = TRUE, hi_inclusive = TRUE
      )),
      f = list(bounds = list(
        lo = as.Date("1901-01-01"), hi = as.Date("2023-12-31"),
        lo_inclusive = TRUE, hi_inclusive = TRUE
      ))
    )
  )
)
vd@var_assert(1L, var_nm = "a")
vd@var_assert(21L, var_nm = "b")
vd@var_assert("a", var_nm = "c")
vd@var_assert(100L, var_nm = "d")
vd@var_assert(c(0.0, 10.0), var_nm = "e")
vd@var_assert(as.Date("1901-01-01"), var_nm = "f")

# renaming, removing variables
vd <- vame::VariableMetadata(
  var_dt = data.table::data.table(
    var_nm = c("a", "b", "c"),
    flavour = c("tasty", "rancid", "bitter")
  ),
  var_set_dt = data.table::data.table(
    id = "set_01",
    var_nm_set = list(c("a", "b")),
    value_space = list(list(dt = data.table::data.table(
      a = 1:2,
      b = 3:4
    )))
  )
)

vd@var_rename("a", "A")
stopifnot(
  identical(vd@var_meta_get("A", "flavour"), "tasty"),
  identical(names(vd@var_set_value_space_get("set_01")[["dt"]]), c("A", "b")),
  identical(vd@var_set_meta_get("set_01", "var_nm_set"), c("A", "b"))
)

vd@var_set_rename("set_01", "Ab")
stopifnot(
  identical(vd@var_set_meta_get_all("id"), "Ab")
)

vd@var_remove("b")
stopifnot(
  identical(names(vd@var_set_value_space_get("Ab")[["dt"]]), "A"),
  identical(vd@var_set_meta_get("Ab", "var_nm_set"), "A")
)

vd@var_set_remove("Ab")
stopifnot(
  identical(length(vd@var_set_meta_get_all("var_nm_set")), 0L)
)

# retrieving category space data.tables
dt_01 <- data.table::CJ(a = 1:3, b = 3:1, c = 1:3)
dt_02 <- data.table::CJ(d = 1:2, e = 2:1)
vd <- vame::VariableMetadata(
  var_dt = data.table::data.table(
    var_nm = c("a", "b", "c", "d", "e", "f"),
    type = "categorical"
  ),
  var_set_dt = data.table::data.table(
    id = c("abc", "de", "f"),
    var_nm_set = list(
      abc = c("a", "b", "c"),
      de = c("d", "e"),
      f = "f"
     ),
    value_space = list(
      abc = list(dt = dt_01),
      de = list(expr = quote({
        dt_02[
          i = !duplicated(dt_02, by = var_nms),
          j = .SD,
          .SDcols = var_nms
        ]
      })),
      f = list(bounds = list(
        lo = 0L, hi = 10L,
        lo_inclusive = TRUE, hi_inclusive = TRUE
      ))
    )
  )
)

stopifnot(
  all.equal(
    vd@vame_category_space_dt(c("a", "b")),
    dt_01[
      i = !duplicated(dt_01, by = c("a", "b")),
      j = .SD,
      .SDcols = c("a", "b")
    ],
    check.attributes = FALSE
  ),
  all.equal(
    vd@vame_category_space_dt(c("d", "e")),
    dt_02,
    check.attributes = FALSE
  ),
  all.equal(
    vd@vame_category_space_dt(c("a", "f")),
    data.table::CJ(a = 1:3, f = 0:10),
    check.attributes = FALSE
  )
)

# getting category space data.tables --- here a variable appears in
# two different value spaces. this can be handy for defining joint value
# spaces and also conversions.
dt_01 <- data.table::CJ(a = 1:3, b = 3:1, c = 1:3)
dt_02 <- data.table::CJ(a = 0:1, e = 2:1)
vd <- vame::VariableMetadata(
  var_dt = data.table::data.table(
    var_nm = c("a", "b", "c", "e"),
    type = "categorical",
    label_dt = list(
      a = data.table::data.table(
        level = 0:3,
        en = paste0("a_level_", 0:3)
      ),
      b = NULL,
      c = NULL,
      e = data.table::data.table(
        level = 1:2,
        en = paste0("e_level_", 1:2)
      )
    )
  ),
  var_set_dt = data.table::data.table(
    id = c("set_01", "set_02"),
    var_nm_set = list(c("a", "b", "c"), c("a", "e")),
    value_space = list(
      list(dt = dt_01),
      list(dt = dt_02)
    )
  )
)

obs <- vd@vame_category_space_dt(c("a", "b", "e"))
exp <- data.table::data.table(
  a = c(0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L),
  b = c(NA, NA, 1L, 1L, 2L, 2L, 3L, 3L, 1L, 2L, 3L, 1L, 2L, 3L),
  e = c(1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, NA, NA, NA, NA, NA, NA)
)
data.table::setkeyv(obs, names(obs))
data.table::setkeyv(exp, names(exp))
stopifnot(
  all.equal(obs, exp, check.attributes = FALSE)
)

stopifnot(
  vd@var_is_aggregateable_to("a", "e"),
  identical(vd@var_aggregate(0:1, "a", "e"), 2:1)
)

# getting labels for variable levels
dt_01 <- data.table::CJ(a = 1:3, b = 3:1, c = 4:5)
vd <- vame::VariableMetadata(
  var_dt = data.table::data.table(
    var_nm = c("a", "b", "c"),
    type = "categorical",
    label_dt = list(
      a = data.table::data.table(
        level = 1:3,
        en = paste0("a_level_", 1:3)
      ),
      b = data.table::data.table(
        level = 1:3,
        en = paste0("b_level_", 1:3)
      ),
      c = NULL
    )
  ),
  var_set_dt = data.table::data.table(
    id = c("set_01"),
    var_nm_set = list(c("a", "b", "c")),
    value_space = list(
      list(dt = dt_01)
    )
  )
)

obs <- vd@var_labels_get(x = 1:4, var_nm = "a", label_col_nm = "en")
exp <- c(paste0("a_level_", 1:3), NA)
stopifnot(
  identical(obs, exp)
)

obs <- tryCatch(
  vd@var_labels_get(
    x = 1:4,
    var_nm = "a",
    label_col_nm = "this does not exist"
  ),
  error = function(e) e[["message"]]
)
exp <- paste0(
  "label_col_nm = \"this does not exist\"",
  " not one of the defined label columns: \"en\""
)
stopifnot(
  grepl(exp, obs)
)

obs <- tryCatch(
  vd@var_labels_get(
    x = 1:4,
    var_nm = "c",
    label_col_nm = "en"
  ),
  error = function(e) e[["message"]]
)
exp <- "Variable \"c\" has no label_dt defined"
stopifnot(
  grepl(exp, obs)
)
}
